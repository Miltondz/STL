/**\n * Tests para SeededRNG\n * Verifica que el generador de números aleatorios sea determinista y correcto\n */\n\nimport { SeededRNG } from './rng';\n\ndescribe('SeededRNG', () => {\n  describe('constructor', () => {\n    it('debería crear una instancia con semilla válida', () => {\n      const rng = new SeededRNG(12345);\n      expect(rng).toBeDefined();\n    });\n\n    it('debería normalizar semillas negativas', () => {\n      const rng1 = new SeededRNG(-1);\n      const rng2 = new SeededRNG(-1);\n      // Ambas deberían producir la misma secuencia\n      expect(rng1.next()).toBe(rng2.next());\n    });\n  });\n\n  describe('next()', () => {\n    it('debería retornar números entre 0 (incluido) y 1 (excluido)', () => {\n      const rng = new SeededRNG(42);\n      for (let i = 0; i < 100; i++) {\n        const num = rng.next();\n        expect(num).toBeGreaterThanOrEqual(0);\n        expect(num).toBeLessThan(1);\n      }\n    });\n\n    it('debería ser determinista (misma semilla = misma secuencia)', () => {\n      const rng1 = new SeededRNG(999);\n      const rng2 = new SeededRNG(999);\n\n      const sequence1 = Array.from({ length: 10 }, () => rng1.next());\n      const sequence2 = Array.from({ length: 10 }, () => rng2.next());\n\n      expect(sequence1).toEqual(sequence2);\n    });\n\n    it('debería producir diferente secuencia con diferente semilla', () => {\n      const rng1 = new SeededRNG(111);\n      const rng2 = new SeededRNG(222);\n\n      const first1 = rng1.next();\n      const first2 = rng2.next();\n\n      expect(first1).not.toBe(first2);\n    });\n  });\n\n  describe('nextInt()', () => {\n    it('debería retornar enteros en el rango inclusivo [min, max]', () => {\n      const rng = new SeededRNG(777);\n      const min = 1;\n      const max = 6;\n\n      for (let i = 0; i < 100; i++) {\n        const num = rng.nextInt(min, max);\n        expect(num).toBeGreaterThanOrEqual(min);\n        expect(num).toBeLessThanOrEqual(max);\n        expect(Number.isInteger(num)).toBe(true);\n      }\n    });\n\n    it('debería ser determinista con misma semilla', () => {\n      const rng1 = new SeededRNG(555);\n      const rng2 = new SeededRNG(555);\n\n      const seq1 = Array.from({ length: 10 }, () => rng1.nextInt(1, 20));\n      const seq2 = Array.from({ length: 10 }, () => rng2.nextInt(1, 20));\n\n      expect(seq1).toEqual(seq2);\n    });\n\n    it('debería manejar min === max', () => {\n      const rng = new SeededRNG(666);\n      const result = rng.nextInt(5, 5);\n      expect(result).toBe(5);\n    });\n  });\n\n  describe('getState() y setState()', () => {\n    it('debería guardar y restaurar estado correctamente', () => {\n      const rng = new SeededRNG(888);\n      \n      // Generar algunos números\n      rng.next();\n      rng.next();\n      \n      // Guardar estado\n      const savedState = rng.getState();\n      \n      // Generar más números\n      const next1 = rng.next();\n      const next2 = rng.next();\n      \n      // Restaurar estado\n      rng.setState(savedState);\n      \n      // Debe producir la misma secuencia\n      const restored1 = rng.next();\n      const restored2 = rng.next();\n      \n      expect(restored1).toBe(next1);\n      expect(restored2).toBe(next2);\n    });\n  });\n});\n"}