/**\n * Sistema de Cadenas Narrativas Multi-Capítulo\n * Permite crear eventos encadenados que forman historias largas\n */\n\nimport type { EventCard, StateChanges } from './content-schema';\n\n// ============= TIPOS Y ENUMS =============\n\nexport type EventChainConditionType = 'flag' | 'crew_present' | 'stat_threshold' | 'death' | 'crew_dead' | 'custom';\nexport type ComparisonOperator = 'equals' | 'greater' | 'less' | 'contains' | 'not_equals';\nexport type ChainTriggerType = 'always' | 'on_specific_choice' | 'on_success' | 'on_failure' | 'on_custom';\nexport type ChainCategory = 'exploration' | 'combat' | 'diplomatic' | 'mystery' | 'internal' | 'faction';\n\n// ============= CONDICIONES =============\n\n/**\n * Define una condición que debe cumplirse para progresar en la cadena\n * Ejemplo: Si flag \"beacon_activated\" es true, entonces avanza a nodo X\n */\nexport interface EventChainCondition {\n  type: EventChainConditionType;\n  target?: string;                // Flag ID, crew ID, stat name\n  operator?: ComparisonOperator;\n  value?: any;\n  description: string;            // Descripción legible: \"Activaste el beacon\"\n}\n\n// ============= TRANSICIONES ENTRE NODOS =============\n\n/**\n * Define cómo se transiciona de un nodo a otro\n */\nexport interface ChainNodeTransition {\n  nodeId: string;                 // ID del siguiente nodo\n  trigger: ChainTriggerType;\n  choiceId?: string;              // Opción específica que dispara\n  description?: string;           // Descripción de la transición\n  probability?: number;           // 0-100, para transiciones aleatorias\n}\n\n// ============= NODOS DE CADENA =============\n\n/**\n * Un nodo es un punto en la cadena narrativa\n * Contiene un evento específico y define cómo continúa la historia\n */\nexport interface ChainNode {\n  id: string;                     // Identificador único: node_01, node_02a, etc\n  eventId: string;                // ID del evento que ocurre en este nodo\n  order: number;                  // Número de capítulo (1, 2, 3...)\n  chapterTitle?: string;          // \"Capítulo 1: Descubrimiento\"\n  chapterDescription?: string;    // Descripción corta del capítulo\n  \n  // Verificación de requisitos\n  conditions?: EventChainCondition[];\n  \n  // Progresión\n  nextNodes?: ChainNodeTransition[];\n  \n  // Información\n  description?: string;\n  difficulty?: 'easy' | 'medium' | 'hard';\n}\n\n// ============= RECOMPENSAS =============\n\n/**\n * Define recompensas al completar la cadena\n */\nexport interface EventChainRewards {\n  onCompletion?: StateChanges;    // Recompensa al completar cadena completa\n  perPath?: Record<string, StateChanges>; // Diferentes recompensas por camino\n  achievements?: string[];        // Logros desbloqueados\n  unlocksContent?: string[];      // IDs de contenido desbloqueado\n}\n\n// ============= NARRATIVA =============\n\n/**\n * Textos narrativos para la cadena\n */\nexport interface EventChainNarrative {\n  introduction: string;           // Intro al iniciar: \"Una señal débil...\"\n  conclusion: string;             // Conclusión al completar\n  variations?: Record<string, string>; // Textos alternativos por camino\n}\n\n// ============= CADENA COMPLETA =============\n\n/**\n * Define una cadena narrativa completa\n * Ejemplo: \"La Base Abandonada\" con 3 capítulos interconectados\n */\nexport interface EventChain {\n  id: string;                     // Identificador: arc_abandoned_base\n  title: string;                  // \"La Base Abandonada\"\n  description: string;            // Descripción breve\n  category?: ChainCategory;\n  chapters: number;               // Cantidad total de capítulos\n  difficulty?: 'easy' | 'medium' | 'hard';\n  \n  // Estructura\n  startNode: string;              // ID del primer nodo\n  nodes: ChainNode[];\n  \n  // Recompensas y narrativa\n  rewards?: EventChainRewards;\n  narrative?: EventChainNarrative;\n  \n  // Control de cadena\n  canAbandon?: boolean;           // ¿Puede cancelarse la cadena?\n  startConditions?: EventChainCondition[];  // Condiciones para activarse automáticamente\n  maxDuration?: number;           // Máximo de nodos antes de expirar\n  \n  // Metadatos\n  tags?: string[];\n  author?: string;\n  version?: string;\n}\n\n// ============= PROGRESO =============\n\n/**\n * Rastreo del progreso del jugador en una cadena\n */\nexport interface ChainProgress {\n  chainId: string;\n  currentNodeId: string;\n  visitedNodes: string[];\n  completedAt?: Date | null;\n  completionPath?: string;        // Qué camino se tomó (serializado como path)\n  abandonedAt?: Date | null;      // Cuándo se abandonó (null si activa)\n  rewards?: StateChanges;         // Recompensas ya aplicadas\n}\n\n// ============= EXTENSIONES A EVENTCARD =============\n\n/**\n * Propiedades adicionales que un EventCard puede tener si es parte de una cadena\n */\nexport interface EventCardChainData {\n  chainId?: string;               // ID de la cadena a la que pertenece\n  chainNodeId?: string;           // ID del nodo en la cadena\n  chapterNumber?: number;         // Número de capítulo\n  isChainStart?: boolean;         // ¿Es el inicio de una cadena?\n  canAbandonChain?: boolean;      // ¿Se puede abandonar la cadena aquí?\n  nextChainNodeOnChoice?: Record<string, string>; // Opción -> siguiente nodo\n}\n\n// ============= MOTOR DE CADENAS =============\n\n/**\n * Interfaz para el gestor de cadenas narrativas\n */\nexport interface IEventChainManager {\n  // Iniciar/gestionar cadenas\n  startChain(chainId: string, playerState: any): EventCard | null;\n  processChainChoice(chainId: string, nodeId: string, choiceId: string, playerState: any): EventCard | null;\n  completeChain(chainId: string, playerState: any): void;\n  abandonChain(chainId: string, playerState: any): void;\n  \n  // Consultar estado\n  getActiveChains(playerState: any): ChainProgress[];\n  getChainProgress(chainId: string, playerState: any): ChainProgress | null;\n  \n  // Verificación\n  canStartChain(chainId: string, playerState: any): boolean;\n  checkForTriggeredChains(playerState: any): EventCard | null;\n}\n\n// ============= CONFIGURACIÓN DEL SISTEMA =============\n\n/**\n * Configuración global para cadenas\n */\nexport interface EventChainConfig {\n  maxActiveChains: number;        // Máximo de cadenas simultáneas\n  preserveProgressOnLoad: boolean; // Guardar progreso entre sesiones\n  allowMultiplePaths: boolean;    // ¿Puede haber múltiples caminos simultáneos?\n  chainExpireAfterNodes: number;  // Cadena expira si no avanza en N nodos\n}\n"}