/**\n * Sistema de Contenido - Tipos TypeScript\n * Todo el contenido del juego se define aquí: eventos, cartas, tiendas, diálogos, etc.\n * Esto permite editar el juego sin tocar código\n */\n\n// ============= MEDIOS =============\n\nexport interface MediaItem {\n  url: string;\n  orientation?: 'horizontal' | 'vertical';\n  alt?: string;\n  width?: number;\n  height?: number;\n}\n\nexport interface VideoItem {\n  url: string;\n  autoplay?: boolean;\n  loop?: boolean;\n  muted?: boolean;\n  duration?: number; // segundos\n}\n\n// ============= DIÁLOGOS Y MENSAJES =============\n\nexport interface DialogueMessage {\n  character: string;              // ID del personaje o \"SYSTEM\"\n  text: string;\n  image?: MediaItem;              // Reacción visual del personaje\n  duration?: number;              // Milisegundos\n  effect?: string;                // Animación (fade-in, slide, etc)\n}\n\nexport interface DialogueSequence {\n  id: string;\n  title: string;\n  messages: DialogueMessage[];\n  characters: string[];           // IDs de personajes involucrados\n  background?: MediaItem;\n  music?: string;                 // Ruta de audio\n  condition?: string;             // Descripción de cuándo ocurre\n}\n\nexport interface MessageWindow {\n  id: string;\n  type: 'info' | 'warning' | 'success' | 'error';\n  title: string;\n  content: string;\n  image?: MediaItem;\n  duration?: number;              // 0 = esperar a que usuario cierre\n  buttons?: MessageButton[];\n}\n\nexport interface MessageButton {\n  id: string;\n  text: string;\n  action: string;                 // ID de acción\n  condition?: string;\n}\n\n// ============= EFECTOS VISUALES =============\n\nexport interface VisualEffect {\n  id: string;\n  type: 'overlay' | 'popup' | 'fullscreen' | 'corner';\n  content: {\n    image?: MediaItem;\n    video?: VideoItem;\n    text?: string;\n  };\n  positioning?: {\n    x?: 'left' | 'center' | 'right';\n    y?: 'top' | 'center' | 'bottom';\n  };\n  duration: number;               // milisegundos\n  animation?: string;             // fade-in, slide-in, bounce, etc\n}\n\n// ============= CAMBIOS DE ESTADO =============\n\nexport interface StateChanges {\n  credits?: number;\n  xp?: number;\n  fuel?: number;\n  hullDamage?: number;\n  shieldDamage?: number;\n  moral?: number;\n  reputation?: Record<string, number>; // faction -> cambio\n}\n\n// ============= REQUISITOS =============\n\nexport interface Requirements {\n  crew?: string[];                // IDs de tripulantes (cualquiera)\n  crewAll?: string[];             // Todos estos tripulantes\n  minCredits?: number;\n  minLevel?: number;\n  maxLevel?: number;\n  narrativeFlags?: string[];      // Debe tener estas flags\n  notFlags?: string[];            // No debe tener estas flags\n  hasShip?: boolean;\n  reputation?: Record<string, number>; // faction -> mínimo\n}\n\n// ============= CARTAS DE JUEGO =============\n\nexport type CardRarity = 'Inicial' | 'Common' | 'Uncommon' | 'Rare' | 'Epic' | 'Legendary';\nexport type CardType = 'Crew' | 'Attack' | 'Skill' | 'Equipment' | 'Ship';\nexport type Faction = 'Academia' | 'Mercenarios' | 'Tecno-Gremio' | 'Hacktivistas' | 'Comerciante' | 'Neutral';\n\nexport interface CardStats {\n  attack?: number;\n  defense?: number;\n  special?: string;               // Descripción del efecto especial\n}\n\nexport interface AffinityRelation {\n  type: 'positive' | 'negative' | 'neutral' | 'complex';\n  value: number;                  // Modificador\n  description?: string;\n}\n\nexport interface CombatEffect {\n  id: string;\n  name: string;\n  description: string;\n  trigger: 'on_play' | 'on_event' | 'on_combat_start' | 'on_combat_end' | 'on_enemy_attack' | 'on_friendly_attack';\n  condition?: string;             // Descripción de condición\n  effect: string;                 // ID del efecto (ej: 'ADD_XP_BONUS')\n  value?: number;\n  duration?: number;              // Turnos, 0 = permanente\n}\n\nexport interface GameCard {\n  id: string;\n  type: CardType;\n  name: string;\n  faction?: Faction;\n  rarity: CardRarity;\n  cost: number;                   // Costo en combate o energy\n  price: number;                  // Costo en créditos en tienda\n  image: string;\n  description: string;\n  stats?: CardStats;\n  synergies?: Record<string, SynergyEffect>; // factionId -> efecto\n  affinity?: Record<string, AffinityRelation>; // crewId -> relación\n  combatEffects?: CombatEffect[];\n  tags?: string[];\n  flavorText?: string;            // Texto narrativo opcional\n}\n\n// ESPECIAL: Cartas de nave\nexport interface ShipCard extends GameCard {\n  type: 'Ship';\n  maxHull: number;\n  maxFuel: number;\n  maxShields: number;\n  specialAbility?: CombatEffect;\n}\n\n// ============= SINERGIAS =============\n\nexport interface SynergyEffect {\n  effect: string;                 // ID del efecto\n  value: number;\n  description?: string;\n  stackable?: boolean;            // Si se suma o aplica una sola vez\n}\n\nexport interface Synergy {\n  id: string;\n  name: string;\n  description: string;\n  factions?: Faction[];\n  cards?: string[];               // IDs específicas de cartas\n  minCount: number;               // Mínimo de cartas para activar\n  effect: string;                 // ID del efecto\n  value: number;\n  visual?: VisualEffect;          // Mostrar cuando se activa\n}\n\n// ============= TIENDAS =============\n\nexport interface ShopTraitEffect {\n  name: string;\n  effect: string;                 // Cómo afecta los precios/inventario\n  description: string;\n}\n\nexport interface ShopTrait {\n  id: string;\n  name: string;                   // \"Generoso\", \"Avaro\", etc\n  effect: ShopTraitEffect;\n  priceModifier?: number;         // % de descuento/aumento (-0.3 = 30% descuento)\n  stockModifier?: number;         // Cuántas cartas adicionales vende\n}\n\nexport interface ShopInventorySlot {\n  cardId: string;\n  quantity: number;\n  variant?: string;               // Para variar precios de cards similares\n}\n\nexport interface Shop {\n  id: string;\n  name: string;\n  description: string;\n  image?: MediaItem;\n  owner: string;                  // Nombre del vendedor\n  traits: ShopTrait[];\n  inventory: ShopInventorySlot[];\n  services?: {\n    removeCard?: boolean;         // Puede remover cartas del deck\n    repairHull?: boolean;         // Puede reparar el casco\n    upgradeCard?: boolean;        // Puede mejorar cartas\n  };\n  dialogue?: DialogueSequence;    // Diálogo al entrar a la tienda\n  location?: string;              // Dónde se encuentra (ej: \"Estación Alfa\")\n}\n\n// ============= EVENTOS (ENCUENTRO/PELIGRO) =============\n\nexport interface ConsequenceNarrative {\n  reaction?: string;              // Diálogo de NPC\n  log: string;                    // Descripción del resultado\n}\n\nexport interface ConsequenceRoll {\n  probability: number;            // 0-100\n  changes: StateChanges;\n  flags?: Record<string, boolean>;\n  affinity?: Record<string, number>; // crewId -> cambio\n  achievement?: string;\n  narrative: ConsequenceNarrative;\n  media?: {\n    image?: MediaItem;\n    video?: VideoItem;\n  };\n  dialogue?: DialogueSequence;    // Diálogo que puede ocurrir\n  messages?: MessageWindow[];     // Mensajes adicionales\n  effects?: VisualEffect[];       // Efectos visuales\n}\n\nexport interface Consequence {\n  rolls: ConsequenceRoll[];\n}\n\nexport interface EventOption {\n  id: string;\n  text: string;\n  description?: string;\n  requirements?: Requirements;\n  consequence: Consequence;\n  dialogue?: DialogueSequence;    // Diálogo al seleccionar opción\n}\n\nexport interface NarrativeContent {\n  intro: string[];\n  prompt: string;\n}\n\nexport type EventType = 'encounter' | 'hazard';\n\nexport interface EventCard {\n  id: string;\n  title: string;\n  type: EventType;\n  description?: string;\n  image?: MediaItem;\n  video?: VideoItem;\n  narrative: NarrativeContent;\n  options: EventOption[];\n  tags?: string[];\n  difficulty?: 'easy' | 'medium' | 'hard';\n  once?: boolean;                 // Solo una vez por partida\n  dialogue?: DialogueSequence;    // Diálogo al entrar evento\n  effects?: VisualEffect[];       // Efectos visuales al mostrar\n}\n\n// ============= LOGROS Y BANDERAS =============\n\nexport interface Achievement {\n  id: string;\n  name: string;\n  description: string;\n  condition: string;\n  xpBonus?: number;\n  hidden?: boolean;\n  icon?: string;\n}\n\nexport interface NarrativeFlag {\n  id: string;\n  name: string;\n  description: string;\n  category?: 'exploration' | 'relationship' | 'discovery' | 'achievement';\n}\n\n// ============= EFECTOS DEL MOTOR =============\n\nexport interface CombatEffectDefinition {\n  id: string;\n  name: string;\n  description: string;\n  apply: (value: number, state: any) => any; // Cómo se aplica el efecto\n}\n\n// ============= ESQUEMA PRINCIPAL =============\n\nexport interface ContentSchema {\n  version: string;\n  metadata: {\n    title: string;\n    author?: string;\n    description?: string;\n    lastModified: string;\n    gameVersion: string;           // Versión del juego que soporta\n  };\n  // CONTENIDO DE JUEGO\n  cards: GameCard[];\n  ships: ShipCard[];\n  shops: Shop[];\n  // NARRATIVA\n  encounters: EventCard[];\n  hazards: EventCard[];\n  dialogues: DialogueSequence[];\n  messages: MessageWindow[];\n  // MECÁNICA\n  synergies: Synergy[];\n  achievements: Achievement[];\n  // CONFIGURACIÓN\n  flags?: Record<string, NarrativeFlag>;\n  combatEffects?: Record<string, CombatEffectDefinition>;\n}\n\n// ============= VALIDACIÓN =============\n\nexport interface ValidationResult {\n  valid: boolean;\n  errors: ValidationError[];\n  warnings?: string[];\n}\n\nexport interface ValidationError {\n  path: string;\n  message: string;\n  type: 'missing' | 'invalid' | 'duplicate' | 'reference' | 'circular';\n  severity: 'error' | 'warning';\n}\n\n// ============= HELPERS =============\n\nexport type CardInstance = GameCard & { instanceId: string; affinityLevel?: number };\n"}